/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl-test-env/lib/python3.8/site-packages/gym/core.py:317: DeprecationWarning: [33mWARN: Initializing wrapper in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.[0m
  deprecation(
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl-test-env/lib/python3.8/site-packages/gym/wrappers/step_api_compatibility.py:39: DeprecationWarning: [33mWARN: Initializing environment in old step API which returns one bool instead of two. It is recommended to set `new_step_api=True` to use new step API. This will be the default behaviour in future.[0m
  deprecation(
  0%|          | 0/400000 [00:00<?, ?it/s]/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl-test-env/lib/python3.8/site-packages/gym/utils/passive_env_checker.py:241: DeprecationWarning: `np.bool8` is a deprecated alias for `np.bool_`.  (Deprecated NumPy 1.24)
  if not isinstance(terminated, (bool, np.bool8)):
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl-test-env/lib/python3.8/site-packages/gym/utils/passive_env_checker.py:260: UserWarning: [33mWARN: The reward returned by `step()` must be a float, int, np.integer or np.floating, actual type: <class 'torch.Tensor'>[0m
  logger.warn(
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl_test/agents.py:323: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  states = torch.tensor(states, device=device)
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl_test/agents.py:324: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  actions = torch.tensor(actions, device=device)
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl_test/agents.py:325: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  next_states = torch.tensor(next_states, device=device)
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl_test/agents.py:326: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  rewards = torch.tensor(rewards, device=device)
/mnt/lustre/a2fs-work3/work/m22oc/m22oc/s2311726/rl_test/agents.py:327: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  dones = torch.tensor(dones, device=device)
  0%|          | 200/400000 [00:02<1:09:06, 96.41it/s]  0%|          | 400/400000 [00:04<1:11:07, 93.64it/s]  0%|          | 600/400000 [00:06<1:11:19, 93.32it/s]  0%|          | 800/400000 [00:08<1:11:20, 93.25it/s]  0%|          | 1000/400000 [00:10<1:11:24, 93.14it/s]  0%|          | 1200/400000 [00:12<1:11:23, 93.11it/s]  0%|          | 1400/400000 [00:15<1:11:20, 93.12it/s]  0%|          | 1600/400000 [00:17<1:11:17, 93.13it/s]  0%|          | 1800/400000 [00:19<1:11:18, 93.06it/s]  0%|          | 2000/400000 [00:21<1:11:15, 93.09it/s]                                                         0%|          | 2000/400000 [00:21<1:11:15, 93.09it/s]  1%|          | 2200/400000 [00:23<1:13:50, 89.78it/s]  1%|          | 2400/400000 [00:26<1:13:00, 90.77it/s]  1%|          | 2600/400000 [00:28<1:12:23, 91.50it/s]  1%|          | 2800/400000 [00:30<1:11:59, 91.96it/s]  1%|          | 3000/400000 [00:32<1:11:44, 92.23it/s]  1%|          | 3200/400000 [00:34<1:11:48, 92.10it/s]  1%|          | 3400/400000 [00:36<1:11:32, 92.40it/s]  1%|          | 3600/400000 [00:38<1:11:19, 92.63it/s]  1%|          | 3800/400000 [00:41<1:11:11, 92.75it/s]  1%|          | 4000/400000 [00:43<1:11:02, 92.91it/s]                                                         1%|          | 4000/400000 [00:43<1:11:02, 92.91it/s]  1%|          | 4200/400000 [00:45<1:13:37, 89.60it/s]  1%|          | 4400/400000 [00:47<1:12:55, 90.41it/s]  1%|          | 4600/400000 [00:49<1:12:24, 91.01it/s]  1%|          | 4800/400000 [00:52<1:12:06, 91.34it/s]  1%|▏         | 5000/400000 [00:54<1:11:49, 91.66it/s]  1%|▏         | 5200/400000 [00:56<1:11:43, 91.75it/s]  1%|▏         | 5400/400000 [00:58<1:11:35, 91.86it/s]  1%|▏         | 5600/400000 [01:00<1:11:29, 91.95it/s]  1%|▏         | 5800/400000 [01:02<1:11:21, 92.06it/s]  2%|▏         | 6000/400000 [01:05<1:11:14, 92.17it/s]                                                         2%|▏         | 6000/400000 [01:05<1:11:14, 92.17it/s]  2%|▏         | 6200/400000 [01:07<1:13:33, 89.23it/s]  2%|▏         | 6400/400000 [01:09<1:12:42, 90.23it/s]  2%|▏         | 6600/400000 [01:11<1:12:03, 91.00it/s]  2%|▏         | 6800/400000 [01:14<1:11:34, 91.56it/s]  2%|▏         | 7000/400000 [01:16<1:11:16, 91.91it/s]  2%|▏         | 7200/400000 [01:18<1:11:03, 92.14it/s]  2%|▏         | 7400/400000 [01:20<1:10:54, 92.28it/s]  2%|▏         | 7600/400000 [01:22<1:10:50, 92.32it/s]  2%|▏         | 7800/400000 [01:24<1:10:42, 92.45it/s]  2%|▏         | 8000/400000 [01:26<1:10:35, 92.56it/s]                                                         2%|▏         | 8000/400000 [01:27<1:10:35, 92.56it/s]                                                         2%|▏         | 8000/400000 [01:27<1:10:35, 92.56it/s]  2%|▏         | 8000/400000 [01:27<1:11:14, 91.72it/s]
